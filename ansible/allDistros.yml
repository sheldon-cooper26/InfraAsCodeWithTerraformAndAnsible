---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
  - name: Install LAMP Packages on ubuntu
    apt: name={{ item }} update_cache=yes state=latest
    loop: [ 'apache2', 'mariadb-server', 'php', 'php-mysql','python3-pymysql','libapache2-mod-php','php-xml','php-mbstring','php-apcu','php-intl','imagemagick','inkscape','php-gd','php-cli','php-curl','php-bcmath','git']
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

# MySQL Configuration
  - name: Sets the root password ubuntu
    mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: Removes all anonymous user accounts ubuntu
    mysql_user:
        name: ''
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: Removes the MySQL test database ubuntu
    mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: Create user ubuntu
    community.mysql.mysql_user:
      name: 'wiki'
      password: '{{ wiki_user_password }}'
      login_host: 'localhost'
      login_user: 'root'
      login_password: '{{ mysql_root_password }}'
      state: present
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: Create a new database ubuntu
    mysql_db:
      name: 'wikidatabase'
      state: present
      login_host: 'localhost'
      login_user: 'root'
      login_password: "{{ mysql_root_password }}"
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: Transfer the script ubuntu
    copy: src=install_mediawiki.sh dest=/home/ubuntu mode=0777
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: Execute the script ubuntu
    command: bash /home/ubuntu/install_mediawiki.sh
    when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

  - name: Install LAMP Packages on redhat
    dnf: name={{ item }} update_cache=no state=latest
    loop: [ 'php-mysqlnd', 'php-fpm', 'mariadb-server','httpd']
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Create document root redhat
    file:
      path: "/var/www/{{ http_host }}"
      state: directory
      owner: "{{ redhat_user }}"
      mode: '0755'
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: install firewalld redhat
    dnf:
      name: firewalld
      state: present
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Open port 80 for http access redhat
    firewalld:
      service: http
      permanent: true
      state: enabled
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Open port 443 for https access redhat
    firewalld:
      service: https
      permanent: true
      state: enabled
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Restart the firewalld service to load in the firewall changes redhat
    service:
      name: firewalld
      state: restarted
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Make sure a service unit is running redhat
    ansible.builtin.systemd:
      state: started
      name: httpd
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Enable service httpd and ensure it is not masked redhat
    ansible.builtin.systemd:
      name: httpd
      enabled: yes
      masked: no
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Creating a file with content redhat
    copy:
      dest: "/var/www/html/index.html"
      content: |
            "Welcome to this site!"
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: create directory for virtual hosts redhat
    template:
      src: "files/httpd.conf.j2"
      dest: "/etc/httpd/conf/{{ http_conf }}"
    notify: Reload httpd
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Set up Apache virtualhost redhat
    file:
      path: /var/www/{{http_host}}
      state: directory
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Make sure a mariadb service unit is running redhat
    ansible.builtin.systemd:
      state: started
      name: mariadb
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Make sure a mariadb service unit is enabled redhat
    ansible.builtin.systemd:
      name: mariadb
      enabled: yes
      masked: no
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Install python3-PyMySQL library redhat
    dnf:
        name: python3-PyMySQL
        state: present
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Set MySQL root Password redhat
    mysql_user:
        login_host: 'localhost'
        login_user: 'root'
        login_password: ''
        name: 'root'
        password: '{{ mysql_root_password }}'
        state: present
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Import EPEL GPG key redhat
    rpm_key:
      key: "{{ fusioninventory__repo_gpgkey }}"
      state: present
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Add EPEL Repository redhat
    yum:
      name: "{{ fusioninventory__repo_package }}"
      state: present
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Install dnf-utils library redhat
    dnf:
      name: dnf-utils
      state: present
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  #Install php Configuration
  - name: Install PhP Packages redhat
    dnf: name={{ item }} update_cache=yes state=latest
    loop: [ 'php', 'php-fpm', 'php-mysqlnd','php-opcache','php-gd','php-xml','php-mbstring' ]
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Make sure a php-fm service unit is running redhat
    ansible.builtin.systemd:
      state: started
      name: php-fpm
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Make sure a php-fm service unit is enabled redhat
    ansible.builtin.systemd:
      name: php-fpm
      enabled: yes
      masked: no
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Reload service httpd, in all cases redhat
    ansible.builtin.systemd:
      name: httpd.service
      state: reloaded
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  # PHP Info Page
  - name: Sets Up PHP Info Page redhat
    template:
      src: "files/info.php.j2"
      dest: "/var/www/{{ http_host }}/info.php"
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Creating a file with content redhat
    copy:
      dest: "/var/www/html/info.php"
      content: |
          "<?php
            phpinfo();?>"
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Transfer the script redhat
    copy: src=install_module.sh dest=/home/ec2-user mode=0777
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Execute the script redhat
    command: sh /home/ec2-user/install_module.sh
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Create user redhat
    community.mysql.mysql_user:
      name: 'wiki'
      password: '{{ wiki_user_password }}'
      login_host: 'localhost'
      login_user: 'root'
      login_password: '{{ mysql_root_password }}'
      state: present
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Create a new database redhat
    mysql_db:
      name: 'wikidatabase'
      state: present
      login_host: 'localhost'
      login_user: 'root'
      login_password: "{{ mysql_root_password }}"
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Transfer the script redhat
    copy: src=install_mediawiki.sh dest=/home/ec2-user mode=0777
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  - name: Execute the script redhat
    command: bash /home/ec2-user/install_mediawiki.sh
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

  handlers:
   - name: Reload Apache
     service:
        name: apache2
        state: reloaded
     when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

   - name: Restart Apache
     service:
        name: apache2
        state: restarted
     when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
     
   - name: Reload httpd
     service:
        name: httpd
        state: reloaded
     when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

   - name: Restart httpd
     service:
        name: httpd
        state: restarted
     when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
